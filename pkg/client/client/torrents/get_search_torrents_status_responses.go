// Code generated by go-swagger; DO NOT EDIT.

package torrents

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/RacoonMediaServer/rms-media-discovery/pkg/client/models"
)

// GetSearchTorrentsStatusReader is a Reader for the GetSearchTorrentsStatus structure.
type GetSearchTorrentsStatusReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetSearchTorrentsStatusReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetSearchTorrentsStatusOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewGetSearchTorrentsStatusNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetSearchTorrentsStatusInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /torrents/search/{id}:status] getSearchTorrentsStatus", response, response.Code())
	}
}

// NewGetSearchTorrentsStatusOK creates a GetSearchTorrentsStatusOK with default headers values
func NewGetSearchTorrentsStatusOK() *GetSearchTorrentsStatusOK {
	return &GetSearchTorrentsStatusOK{}
}

/*
GetSearchTorrentsStatusOK describes a response with status code 200, with default header values.

OK
*/
type GetSearchTorrentsStatusOK struct {
	Payload *GetSearchTorrentsStatusOKBody
}

// IsSuccess returns true when this get search torrents status o k response has a 2xx status code
func (o *GetSearchTorrentsStatusOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get search torrents status o k response has a 3xx status code
func (o *GetSearchTorrentsStatusOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get search torrents status o k response has a 4xx status code
func (o *GetSearchTorrentsStatusOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get search torrents status o k response has a 5xx status code
func (o *GetSearchTorrentsStatusOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get search torrents status o k response a status code equal to that given
func (o *GetSearchTorrentsStatusOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get search torrents status o k response
func (o *GetSearchTorrentsStatusOK) Code() int {
	return 200
}

func (o *GetSearchTorrentsStatusOK) Error() string {
	return fmt.Sprintf("[GET /torrents/search/{id}:status][%d] getSearchTorrentsStatusOK  %+v", 200, o.Payload)
}

func (o *GetSearchTorrentsStatusOK) String() string {
	return fmt.Sprintf("[GET /torrents/search/{id}:status][%d] getSearchTorrentsStatusOK  %+v", 200, o.Payload)
}

func (o *GetSearchTorrentsStatusOK) GetPayload() *GetSearchTorrentsStatusOKBody {
	return o.Payload
}

func (o *GetSearchTorrentsStatusOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetSearchTorrentsStatusOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSearchTorrentsStatusNotFound creates a GetSearchTorrentsStatusNotFound with default headers values
func NewGetSearchTorrentsStatusNotFound() *GetSearchTorrentsStatusNotFound {
	return &GetSearchTorrentsStatusNotFound{}
}

/*
GetSearchTorrentsStatusNotFound describes a response with status code 404, with default header values.

Задача поиска не найдена
*/
type GetSearchTorrentsStatusNotFound struct {
}

// IsSuccess returns true when this get search torrents status not found response has a 2xx status code
func (o *GetSearchTorrentsStatusNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get search torrents status not found response has a 3xx status code
func (o *GetSearchTorrentsStatusNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get search torrents status not found response has a 4xx status code
func (o *GetSearchTorrentsStatusNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get search torrents status not found response has a 5xx status code
func (o *GetSearchTorrentsStatusNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get search torrents status not found response a status code equal to that given
func (o *GetSearchTorrentsStatusNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get search torrents status not found response
func (o *GetSearchTorrentsStatusNotFound) Code() int {
	return 404
}

func (o *GetSearchTorrentsStatusNotFound) Error() string {
	return fmt.Sprintf("[GET /torrents/search/{id}:status][%d] getSearchTorrentsStatusNotFound ", 404)
}

func (o *GetSearchTorrentsStatusNotFound) String() string {
	return fmt.Sprintf("[GET /torrents/search/{id}:status][%d] getSearchTorrentsStatusNotFound ", 404)
}

func (o *GetSearchTorrentsStatusNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetSearchTorrentsStatusInternalServerError creates a GetSearchTorrentsStatusInternalServerError with default headers values
func NewGetSearchTorrentsStatusInternalServerError() *GetSearchTorrentsStatusInternalServerError {
	return &GetSearchTorrentsStatusInternalServerError{}
}

/*
GetSearchTorrentsStatusInternalServerError describes a response with status code 500, with default header values.

Ошибка на стороне сервера
*/
type GetSearchTorrentsStatusInternalServerError struct {
}

// IsSuccess returns true when this get search torrents status internal server error response has a 2xx status code
func (o *GetSearchTorrentsStatusInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get search torrents status internal server error response has a 3xx status code
func (o *GetSearchTorrentsStatusInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get search torrents status internal server error response has a 4xx status code
func (o *GetSearchTorrentsStatusInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get search torrents status internal server error response has a 5xx status code
func (o *GetSearchTorrentsStatusInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get search torrents status internal server error response a status code equal to that given
func (o *GetSearchTorrentsStatusInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the get search torrents status internal server error response
func (o *GetSearchTorrentsStatusInternalServerError) Code() int {
	return 500
}

func (o *GetSearchTorrentsStatusInternalServerError) Error() string {
	return fmt.Sprintf("[GET /torrents/search/{id}:status][%d] getSearchTorrentsStatusInternalServerError ", 500)
}

func (o *GetSearchTorrentsStatusInternalServerError) String() string {
	return fmt.Sprintf("[GET /torrents/search/{id}:status][%d] getSearchTorrentsStatusInternalServerError ", 500)
}

func (o *GetSearchTorrentsStatusInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*
GetSearchTorrentsStatusOKBody get search torrents status o k body
swagger:model GetSearchTorrentsStatusOKBody
*/
type GetSearchTorrentsStatusOKBody struct {

	// error
	Error string `json:"error,omitempty"`

	// results
	Results []*models.SearchTorrentsResult `json:"results"`

	// status
	// Required: true
	// Enum: [working ready error]
	Status *string `json:"status"`
}

// Validate validates this get search torrents status o k body
func (o *GetSearchTorrentsStatusOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateResults(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetSearchTorrentsStatusOKBody) validateResults(formats strfmt.Registry) error {
	if swag.IsZero(o.Results) { // not required
		return nil
	}

	for i := 0; i < len(o.Results); i++ {
		if swag.IsZero(o.Results[i]) { // not required
			continue
		}

		if o.Results[i] != nil {
			if err := o.Results[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getSearchTorrentsStatusOK" + "." + "results" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getSearchTorrentsStatusOK" + "." + "results" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var getSearchTorrentsStatusOKBodyTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["working","ready","error"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		getSearchTorrentsStatusOKBodyTypeStatusPropEnum = append(getSearchTorrentsStatusOKBodyTypeStatusPropEnum, v)
	}
}

const (

	// GetSearchTorrentsStatusOKBodyStatusWorking captures enum value "working"
	GetSearchTorrentsStatusOKBodyStatusWorking string = "working"

	// GetSearchTorrentsStatusOKBodyStatusReady captures enum value "ready"
	GetSearchTorrentsStatusOKBodyStatusReady string = "ready"

	// GetSearchTorrentsStatusOKBodyStatusError captures enum value "error"
	GetSearchTorrentsStatusOKBodyStatusError string = "error"
)

// prop value enum
func (o *GetSearchTorrentsStatusOKBody) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, getSearchTorrentsStatusOKBodyTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *GetSearchTorrentsStatusOKBody) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("getSearchTorrentsStatusOK"+"."+"status", "body", o.Status); err != nil {
		return err
	}

	// value enum
	if err := o.validateStatusEnum("getSearchTorrentsStatusOK"+"."+"status", "body", *o.Status); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this get search torrents status o k body based on the context it is used
func (o *GetSearchTorrentsStatusOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateResults(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetSearchTorrentsStatusOKBody) contextValidateResults(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Results); i++ {

		if o.Results[i] != nil {

			if swag.IsZero(o.Results[i]) { // not required
				return nil
			}

			if err := o.Results[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getSearchTorrentsStatusOK" + "." + "results" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getSearchTorrentsStatusOK" + "." + "results" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetSearchTorrentsStatusOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetSearchTorrentsStatusOKBody) UnmarshalBinary(b []byte) error {
	var res GetSearchTorrentsStatusOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
