// Code generated by go-swagger; DO NOT EDIT.

package torrents

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SearchTorrentsAsyncReader is a Reader for the SearchTorrentsAsync structure.
type SearchTorrentsAsyncReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SearchTorrentsAsyncReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewSearchTorrentsAsyncOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 500:
		result := NewSearchTorrentsAsyncInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /torrents/search:run] searchTorrentsAsync", response, response.Code())
	}
}

// NewSearchTorrentsAsyncOK creates a SearchTorrentsAsyncOK with default headers values
func NewSearchTorrentsAsyncOK() *SearchTorrentsAsyncOK {
	return &SearchTorrentsAsyncOK{}
}

/*
SearchTorrentsAsyncOK describes a response with status code 200, with default header values.

OK
*/
type SearchTorrentsAsyncOK struct {
	Payload *SearchTorrentsAsyncOKBody
}

// IsSuccess returns true when this search torrents async o k response has a 2xx status code
func (o *SearchTorrentsAsyncOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this search torrents async o k response has a 3xx status code
func (o *SearchTorrentsAsyncOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this search torrents async o k response has a 4xx status code
func (o *SearchTorrentsAsyncOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this search torrents async o k response has a 5xx status code
func (o *SearchTorrentsAsyncOK) IsServerError() bool {
	return false
}

// IsCode returns true when this search torrents async o k response a status code equal to that given
func (o *SearchTorrentsAsyncOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the search torrents async o k response
func (o *SearchTorrentsAsyncOK) Code() int {
	return 200
}

func (o *SearchTorrentsAsyncOK) Error() string {
	return fmt.Sprintf("[POST /torrents/search:run][%d] searchTorrentsAsyncOK  %+v", 200, o.Payload)
}

func (o *SearchTorrentsAsyncOK) String() string {
	return fmt.Sprintf("[POST /torrents/search:run][%d] searchTorrentsAsyncOK  %+v", 200, o.Payload)
}

func (o *SearchTorrentsAsyncOK) GetPayload() *SearchTorrentsAsyncOKBody {
	return o.Payload
}

func (o *SearchTorrentsAsyncOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(SearchTorrentsAsyncOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSearchTorrentsAsyncInternalServerError creates a SearchTorrentsAsyncInternalServerError with default headers values
func NewSearchTorrentsAsyncInternalServerError() *SearchTorrentsAsyncInternalServerError {
	return &SearchTorrentsAsyncInternalServerError{}
}

/*
SearchTorrentsAsyncInternalServerError describes a response with status code 500, with default header values.

Ошибка на стороне сервера
*/
type SearchTorrentsAsyncInternalServerError struct {
}

// IsSuccess returns true when this search torrents async internal server error response has a 2xx status code
func (o *SearchTorrentsAsyncInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this search torrents async internal server error response has a 3xx status code
func (o *SearchTorrentsAsyncInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this search torrents async internal server error response has a 4xx status code
func (o *SearchTorrentsAsyncInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this search torrents async internal server error response has a 5xx status code
func (o *SearchTorrentsAsyncInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this search torrents async internal server error response a status code equal to that given
func (o *SearchTorrentsAsyncInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the search torrents async internal server error response
func (o *SearchTorrentsAsyncInternalServerError) Code() int {
	return 500
}

func (o *SearchTorrentsAsyncInternalServerError) Error() string {
	return fmt.Sprintf("[POST /torrents/search:run][%d] searchTorrentsAsyncInternalServerError ", 500)
}

func (o *SearchTorrentsAsyncInternalServerError) String() string {
	return fmt.Sprintf("[POST /torrents/search:run][%d] searchTorrentsAsyncInternalServerError ", 500)
}

func (o *SearchTorrentsAsyncInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*
SearchTorrentsAsyncBody search torrents async body
swagger:model SearchTorrentsAsyncBody
*/
type SearchTorrentsAsyncBody struct {

	// Скачать всю дискогорафию исполнителя (для музыки)
	Discography *bool `json:"discography,omitempty"`

	// Ограничение на кол-во результатов
	// Minimum: 1
	Limit int64 `json:"limit,omitempty"`

	// Искомый запрос
	// Required: true
	// Max Length: 128
	// Min Length: 2
	Q *string `json:"q"`

	// Номер сезона (для сериалов)
	// Minimum: 1
	Season int64 `json:"season,omitempty"`

	// Строго отсеивать раздачи, эвристически определенное имя которых не соответствует строчке запроса
	Strong *bool `json:"strong,omitempty"`

	// Подсказка, какого типа торренты искать
	// Enum: [movies music books others]
	Type string `json:"type,omitempty"`

	// Год выхода (для фильмов и сериалов)
	// Minimum: 1900
	Year int64 `json:"year,omitempty"`
}

// Validate validates this search torrents async body
func (o *SearchTorrentsAsyncBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateLimit(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateQ(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSeason(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateYear(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SearchTorrentsAsyncBody) validateLimit(formats strfmt.Registry) error {
	if swag.IsZero(o.Limit) { // not required
		return nil
	}

	if err := validate.MinimumInt("searchParameters"+"."+"limit", "body", o.Limit, 1, false); err != nil {
		return err
	}

	return nil
}

func (o *SearchTorrentsAsyncBody) validateQ(formats strfmt.Registry) error {

	if err := validate.Required("searchParameters"+"."+"q", "body", o.Q); err != nil {
		return err
	}

	if err := validate.MinLength("searchParameters"+"."+"q", "body", *o.Q, 2); err != nil {
		return err
	}

	if err := validate.MaxLength("searchParameters"+"."+"q", "body", *o.Q, 128); err != nil {
		return err
	}

	return nil
}

func (o *SearchTorrentsAsyncBody) validateSeason(formats strfmt.Registry) error {
	if swag.IsZero(o.Season) { // not required
		return nil
	}

	if err := validate.MinimumInt("searchParameters"+"."+"season", "body", o.Season, 1, false); err != nil {
		return err
	}

	return nil
}

var searchTorrentsAsyncBodyTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["movies","music","books","others"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		searchTorrentsAsyncBodyTypeTypePropEnum = append(searchTorrentsAsyncBodyTypeTypePropEnum, v)
	}
}

const (

	// SearchTorrentsAsyncBodyTypeMovies captures enum value "movies"
	SearchTorrentsAsyncBodyTypeMovies string = "movies"

	// SearchTorrentsAsyncBodyTypeMusic captures enum value "music"
	SearchTorrentsAsyncBodyTypeMusic string = "music"

	// SearchTorrentsAsyncBodyTypeBooks captures enum value "books"
	SearchTorrentsAsyncBodyTypeBooks string = "books"

	// SearchTorrentsAsyncBodyTypeOthers captures enum value "others"
	SearchTorrentsAsyncBodyTypeOthers string = "others"
)

// prop value enum
func (o *SearchTorrentsAsyncBody) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, searchTorrentsAsyncBodyTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *SearchTorrentsAsyncBody) validateType(formats strfmt.Registry) error {
	if swag.IsZero(o.Type) { // not required
		return nil
	}

	// value enum
	if err := o.validateTypeEnum("searchParameters"+"."+"type", "body", o.Type); err != nil {
		return err
	}

	return nil
}

func (o *SearchTorrentsAsyncBody) validateYear(formats strfmt.Registry) error {
	if swag.IsZero(o.Year) { // not required
		return nil
	}

	if err := validate.MinimumInt("searchParameters"+"."+"year", "body", o.Year, 1900, false); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this search torrents async body based on context it is used
func (o *SearchTorrentsAsyncBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *SearchTorrentsAsyncBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SearchTorrentsAsyncBody) UnmarshalBinary(b []byte) error {
	var res SearchTorrentsAsyncBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
SearchTorrentsAsyncOKBody search torrents async o k body
swagger:model SearchTorrentsAsyncOKBody
*/
type SearchTorrentsAsyncOKBody struct {

	// ID задачи поиска
	ID string `json:"id,omitempty"`

	// Рекомендуемый интервал поллинга
	PollIntervalMs int64 `json:"pollIntervalMs,omitempty"`
}

// Validate validates this search torrents async o k body
func (o *SearchTorrentsAsyncOKBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this search torrents async o k body based on context it is used
func (o *SearchTorrentsAsyncOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *SearchTorrentsAsyncOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SearchTorrentsAsyncOKBody) UnmarshalBinary(b []byte) error {
	var res SearchTorrentsAsyncOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
