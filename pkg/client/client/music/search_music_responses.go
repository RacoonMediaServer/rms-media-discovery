// Code generated by go-swagger; DO NOT EDIT.

package music

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/RacoonMediaServer/rms-media-discovery/pkg/client/models"
)

// SearchMusicReader is a Reader for the SearchMusic structure.
type SearchMusicReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SearchMusicReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewSearchMusicOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 500:
		result := NewSearchMusicInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /music/search] searchMusic", response, response.Code())
	}
}

// NewSearchMusicOK creates a SearchMusicOK with default headers values
func NewSearchMusicOK() *SearchMusicOK {
	return &SearchMusicOK{}
}

/*
SearchMusicOK describes a response with status code 200, with default header values.

OK
*/
type SearchMusicOK struct {
	Payload *SearchMusicOKBody
}

// IsSuccess returns true when this search music o k response has a 2xx status code
func (o *SearchMusicOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this search music o k response has a 3xx status code
func (o *SearchMusicOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this search music o k response has a 4xx status code
func (o *SearchMusicOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this search music o k response has a 5xx status code
func (o *SearchMusicOK) IsServerError() bool {
	return false
}

// IsCode returns true when this search music o k response a status code equal to that given
func (o *SearchMusicOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the search music o k response
func (o *SearchMusicOK) Code() int {
	return 200
}

func (o *SearchMusicOK) Error() string {
	return fmt.Sprintf("[GET /music/search][%d] searchMusicOK  %+v", 200, o.Payload)
}

func (o *SearchMusicOK) String() string {
	return fmt.Sprintf("[GET /music/search][%d] searchMusicOK  %+v", 200, o.Payload)
}

func (o *SearchMusicOK) GetPayload() *SearchMusicOKBody {
	return o.Payload
}

func (o *SearchMusicOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(SearchMusicOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSearchMusicInternalServerError creates a SearchMusicInternalServerError with default headers values
func NewSearchMusicInternalServerError() *SearchMusicInternalServerError {
	return &SearchMusicInternalServerError{}
}

/*
SearchMusicInternalServerError describes a response with status code 500, with default header values.

Ошибка на стороне сервера
*/
type SearchMusicInternalServerError struct {
}

// IsSuccess returns true when this search music internal server error response has a 2xx status code
func (o *SearchMusicInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this search music internal server error response has a 3xx status code
func (o *SearchMusicInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this search music internal server error response has a 4xx status code
func (o *SearchMusicInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this search music internal server error response has a 5xx status code
func (o *SearchMusicInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this search music internal server error response a status code equal to that given
func (o *SearchMusicInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the search music internal server error response
func (o *SearchMusicInternalServerError) Code() int {
	return 500
}

func (o *SearchMusicInternalServerError) Error() string {
	return fmt.Sprintf("[GET /music/search][%d] searchMusicInternalServerError ", 500)
}

func (o *SearchMusicInternalServerError) String() string {
	return fmt.Sprintf("[GET /music/search][%d] searchMusicInternalServerError ", 500)
}

func (o *SearchMusicInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*
SearchMusicOKBody search music o k body
swagger:model SearchMusicOKBody
*/
type SearchMusicOKBody struct {

	// results
	// Required: true
	Results []*models.SearchMusicResult `json:"results"`
}

// Validate validates this search music o k body
func (o *SearchMusicOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateResults(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SearchMusicOKBody) validateResults(formats strfmt.Registry) error {

	if err := validate.Required("searchMusicOK"+"."+"results", "body", o.Results); err != nil {
		return err
	}

	for i := 0; i < len(o.Results); i++ {
		if swag.IsZero(o.Results[i]) { // not required
			continue
		}

		if o.Results[i] != nil {
			if err := o.Results[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("searchMusicOK" + "." + "results" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("searchMusicOK" + "." + "results" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this search music o k body based on the context it is used
func (o *SearchMusicOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateResults(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SearchMusicOKBody) contextValidateResults(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Results); i++ {

		if o.Results[i] != nil {

			if swag.IsZero(o.Results[i]) { // not required
				return nil
			}

			if err := o.Results[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("searchMusicOK" + "." + "results" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("searchMusicOK" + "." + "results" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *SearchMusicOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SearchMusicOKBody) UnmarshalBinary(b []byte) error {
	var res SearchMusicOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
