// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SearchTorrentsResult search torrents result
//
// swagger:model SearchTorrentsResult
type SearchTorrentsResult struct {

	// Формат
	Format string `json:"format,omitempty"`

	// link
	// Required: true
	Link *string `json:"link"`

	// Качество видео
	// Enum: [ 480p 720p 1080p 2160p]
	Quality string `json:"quality,omitempty"`

	// Rip для видео
	Rip string `json:"rip,omitempty"`

	// Количество сезонов в сериале (если это сериал)
	Seasons []int64 `json:"seasons"`

	// seeders
	// Required: true
	// Minimum: 0
	Seeders *int64 `json:"seeders"`

	// size
	// Required: true
	// Minimum: 0
	Size *int64 `json:"size"`

	// Коды языков, на которых предоставлены субтитры
	Subtitles []string `json:"subtitles"`

	// title
	// Required: true
	Title *string `json:"title"`

	// Озвучка
	Voice string `json:"voice,omitempty"`
}

// Validate validates this search torrents result
func (m *SearchTorrentsResult) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLink(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQuality(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSeasons(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSeeders(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSize(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTitle(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SearchTorrentsResult) validateLink(formats strfmt.Registry) error {

	if err := validate.Required("link", "body", m.Link); err != nil {
		return err
	}

	return nil
}

var searchTorrentsResultTypeQualityPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["","480p","720p","1080p","2160p"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		searchTorrentsResultTypeQualityPropEnum = append(searchTorrentsResultTypeQualityPropEnum, v)
	}
}

const (

	// SearchTorrentsResultQualityEmpty captures enum value ""
	SearchTorrentsResultQualityEmpty string = ""

	// SearchTorrentsResultQualityNr480p captures enum value "480p"
	SearchTorrentsResultQualityNr480p string = "480p"

	// SearchTorrentsResultQualityNr720p captures enum value "720p"
	SearchTorrentsResultQualityNr720p string = "720p"

	// SearchTorrentsResultQualityNr1080p captures enum value "1080p"
	SearchTorrentsResultQualityNr1080p string = "1080p"

	// SearchTorrentsResultQualityNr2160p captures enum value "2160p"
	SearchTorrentsResultQualityNr2160p string = "2160p"
)

// prop value enum
func (m *SearchTorrentsResult) validateQualityEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, searchTorrentsResultTypeQualityPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *SearchTorrentsResult) validateQuality(formats strfmt.Registry) error {
	if swag.IsZero(m.Quality) { // not required
		return nil
	}

	// value enum
	if err := m.validateQualityEnum("quality", "body", m.Quality); err != nil {
		return err
	}

	return nil
}

func (m *SearchTorrentsResult) validateSeasons(formats strfmt.Registry) error {
	if swag.IsZero(m.Seasons) { // not required
		return nil
	}

	for i := 0; i < len(m.Seasons); i++ {

		if err := validate.MinimumInt("seasons"+"."+strconv.Itoa(i), "body", m.Seasons[i], 1, false); err != nil {
			return err
		}

	}

	return nil
}

func (m *SearchTorrentsResult) validateSeeders(formats strfmt.Registry) error {

	if err := validate.Required("seeders", "body", m.Seeders); err != nil {
		return err
	}

	if err := validate.MinimumInt("seeders", "body", *m.Seeders, 0, false); err != nil {
		return err
	}

	return nil
}

func (m *SearchTorrentsResult) validateSize(formats strfmt.Registry) error {

	if err := validate.Required("size", "body", m.Size); err != nil {
		return err
	}

	if err := validate.MinimumInt("size", "body", *m.Size, 0, false); err != nil {
		return err
	}

	return nil
}

func (m *SearchTorrentsResult) validateTitle(formats strfmt.Registry) error {

	if err := validate.Required("title", "body", m.Title); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this search torrents result based on context it is used
func (m *SearchTorrentsResult) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SearchTorrentsResult) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SearchTorrentsResult) UnmarshalBinary(b []byte) error {
	var res SearchTorrentsResult
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
