// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Account account
//
// swagger:model Account
type Account struct {

	// limit
	Limit int64 `json:"limit,omitempty"`

	// login
	// Min Length: 1
	Login string `json:"login,omitempty"`

	// password
	Password string `json:"password,omitempty"`

	// service
	// Required: true
	Service *string `json:"service"`

	// token
	Token string `json:"token,omitempty"`

	// type
	// Required: true
	// Enum: [account token]
	Type *string `json:"type"`
}

// Validate validates this account
func (m *Account) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLogin(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateService(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Account) validateLogin(formats strfmt.Registry) error {
	if swag.IsZero(m.Login) { // not required
		return nil
	}

	if err := validate.MinLength("login", "body", m.Login, 1); err != nil {
		return err
	}

	return nil
}

func (m *Account) validateService(formats strfmt.Registry) error {

	if err := validate.Required("service", "body", m.Service); err != nil {
		return err
	}

	return nil
}

var accountTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["account","token"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		accountTypeTypePropEnum = append(accountTypeTypePropEnum, v)
	}
}

const (

	// AccountTypeAccount captures enum value "account"
	AccountTypeAccount string = "account"

	// AccountTypeToken captures enum value "token"
	AccountTypeToken string = "token"
)

// prop value enum
func (m *Account) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, accountTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Account) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this account based on context it is used
func (m *Account) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Account) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Account) UnmarshalBinary(b []byte) error {
	var res Account
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
