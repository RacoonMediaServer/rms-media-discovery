// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SearchMoviesResult search movies result
//
// swagger:model SearchMoviesResult
type SearchMoviesResult struct {

	// description
	Description string `json:"description,omitempty"`

	// genres
	Genres []string `json:"genres"`

	// id
	// Required: true
	ID *string `json:"id"`

	// poster
	Poster string `json:"poster,omitempty"`

	// preview
	Preview string `json:"preview,omitempty"`

	// rating
	Rating float64 `json:"rating,omitempty"`

	// seasons
	Seasons int64 `json:"seasons,omitempty"`

	// title
	// Required: true
	Title *string `json:"title"`

	// type
	// Enum: [tv-series film]
	Type string `json:"type,omitempty"`

	// year
	Year int64 `json:"year,omitempty"`
}

// Validate validates this search movies result
func (m *SearchMoviesResult) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTitle(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SearchMoviesResult) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *SearchMoviesResult) validateTitle(formats strfmt.Registry) error {

	if err := validate.Required("title", "body", m.Title); err != nil {
		return err
	}

	return nil
}

var searchMoviesResultTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["tv-series","film"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		searchMoviesResultTypeTypePropEnum = append(searchMoviesResultTypeTypePropEnum, v)
	}
}

const (

	// SearchMoviesResultTypeTvDashSeries captures enum value "tv-series"
	SearchMoviesResultTypeTvDashSeries string = "tv-series"

	// SearchMoviesResultTypeFilm captures enum value "film"
	SearchMoviesResultTypeFilm string = "film"
)

// prop value enum
func (m *SearchMoviesResult) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, searchMoviesResultTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *SearchMoviesResult) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this search movies result based on context it is used
func (m *SearchMoviesResult) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SearchMoviesResult) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SearchMoviesResult) UnmarshalBinary(b []byte) error {
	var res SearchMoviesResult
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
