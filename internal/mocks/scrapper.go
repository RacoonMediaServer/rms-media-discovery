// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/scraper/scraper.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	http "net/http"
	reflect "reflect"

	scraper "git.rms.local/RacoonMediaServer/rms-media-discovery/pkg/scraper"
	gomock "github.com/golang/mock/gomock"
)

// MockSelector is a mock of Selector interface.
type MockSelector struct {
	ctrl     *gomock.Controller
	recorder *MockSelectorMockRecorder
}

// MockSelectorMockRecorder is the mock recorder for MockSelector.
type MockSelectorMockRecorder struct {
	mock *MockSelector
}

// NewMockSelector creates a new mock instance.
func NewMockSelector(ctrl *gomock.Controller) *MockSelector {
	mock := &MockSelector{ctrl: ctrl}
	mock.recorder = &MockSelectorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSelector) EXPECT() *MockSelectorMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockSelector) Get(url string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", url)
	ret0, _ := ret[0].(error)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockSelectorMockRecorder) Get(url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockSelector)(nil).Get), url)
}

// GetAsync mocks base method.
func (m *MockSelector) GetAsync(url string, userData interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetAsync", url, userData)
}

// GetAsync indicates an expected call of GetAsync.
func (mr *MockSelectorMockRecorder) GetAsync(url, userData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAsync", reflect.TypeOf((*MockSelector)(nil).GetAsync), url, userData)
}

// Post mocks base method.
func (m *MockSelector) Post(url string, data map[string]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Post", url, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// Post indicates an expected call of Post.
func (mr *MockSelectorMockRecorder) Post(url, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Post", reflect.TypeOf((*MockSelector)(nil).Post), url, data)
}

// Select mocks base method.
func (m *MockSelector) Select(selector string, f scraper.HTMLCallback) scraper.Selector {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Select", selector, f)
	ret0, _ := ret[0].(scraper.Selector)
	return ret0
}

// Select indicates an expected call of Select.
func (mr *MockSelectorMockRecorder) Select(selector, f interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Select", reflect.TypeOf((*MockSelector)(nil).Select), selector, f)
}

// SelectResponse mocks base method.
func (m *MockSelector) SelectResponse(f scraper.ResponseCallback) scraper.Selector {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectResponse", f)
	ret0, _ := ret[0].(scraper.Selector)
	return ret0
}

// SelectResponse indicates an expected call of SelectResponse.
func (mr *MockSelectorMockRecorder) SelectResponse(f interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectResponse", reflect.TypeOf((*MockSelector)(nil).SelectResponse), f)
}

// MockScraper is a mock of Scraper interface.
type MockScraper struct {
	ctrl     *gomock.Controller
	recorder *MockScraperMockRecorder
}

// MockScraperMockRecorder is the mock recorder for MockScraper.
type MockScraperMockRecorder struct {
	mock *MockScraper
}

// NewMockScraper creates a new mock instance.
func NewMockScraper(ctrl *gomock.Controller) *MockScraper {
	mock := &MockScraper{ctrl: ctrl}
	mock.recorder = &MockScraperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockScraper) EXPECT() *MockScraperMockRecorder {
	return m.recorder
}

// Clone mocks base method.
func (m *MockScraper) Clone() scraper.Scraper {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clone")
	ret0, _ := ret[0].(scraper.Scraper)
	return ret0
}

// Clone indicates an expected call of Clone.
func (mr *MockScraperMockRecorder) Clone() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clone", reflect.TypeOf((*MockScraper)(nil).Clone))
}

// Select mocks base method.
func (m *MockScraper) Select(selector string, f scraper.HTMLCallback) scraper.Selector {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Select", selector, f)
	ret0, _ := ret[0].(scraper.Selector)
	return ret0
}

// Select indicates an expected call of Select.
func (mr *MockScraperMockRecorder) Select(selector, f interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Select", reflect.TypeOf((*MockScraper)(nil).Select), selector, f)
}

// SelectResponse mocks base method.
func (m *MockScraper) SelectResponse(f scraper.ResponseCallback) scraper.Selector {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SelectResponse", f)
	ret0, _ := ret[0].(scraper.Selector)
	return ret0
}

// SelectResponse indicates an expected call of SelectResponse.
func (mr *MockScraperMockRecorder) SelectResponse(f interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectResponse", reflect.TypeOf((*MockScraper)(nil).SelectResponse), f)
}

// SetContext mocks base method.
func (m *MockScraper) SetContext(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetContext", ctx)
}

// SetContext indicates an expected call of SetContext.
func (mr *MockScraperMockRecorder) SetContext(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetContext", reflect.TypeOf((*MockScraper)(nil).SetContext), ctx)
}

// SetCookies mocks base method.
func (m *MockScraper) SetCookies(url string, cookies []*http.Cookie) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetCookies", url, cookies)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetCookies indicates an expected call of SetCookies.
func (mr *MockScraperMockRecorder) SetCookies(url, cookies interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCookies", reflect.TypeOf((*MockScraper)(nil).SetCookies), url, cookies)
}

// Wait mocks base method.
func (m *MockScraper) Wait() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Wait")
}

// Wait indicates an expected call of Wait.
func (mr *MockScraperMockRecorder) Wait() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Wait", reflect.TypeOf((*MockScraper)(nil).Wait))
}
