// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/provider/provider.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	model "github.com/RacoonMediaServer/rms-media-discovery/pkg/model"
	provider "github.com/RacoonMediaServer/rms-media-discovery/pkg/provider"
	gomock "github.com/golang/mock/gomock"
)

// MockProvider is a mock of Provider interface.
type MockProvider struct {
	ctrl     *gomock.Controller
	recorder *MockProviderMockRecorder
}

// MockProviderMockRecorder is the mock recorder for MockProvider.
type MockProviderMockRecorder struct {
	mock *MockProvider
}

// NewMockProvider creates a new mock instance.
func NewMockProvider(ctrl *gomock.Controller) *MockProvider {
	mock := &MockProvider{ctrl: ctrl}
	mock.recorder = &MockProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProvider) EXPECT() *MockProviderMockRecorder {
	return m.recorder
}

// ID mocks base method.
func (m *MockProvider) ID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(string)
	return ret0
}

// ID indicates an expected call of ID.
func (mr *MockProviderMockRecorder) ID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockProvider)(nil).ID))
}

// MockMovieInfoProvider is a mock of MovieInfoProvider interface.
type MockMovieInfoProvider struct {
	ctrl     *gomock.Controller
	recorder *MockMovieInfoProviderMockRecorder
}

// MockMovieInfoProviderMockRecorder is the mock recorder for MockMovieInfoProvider.
type MockMovieInfoProviderMockRecorder struct {
	mock *MockMovieInfoProvider
}

// NewMockMovieInfoProvider creates a new mock instance.
func NewMockMovieInfoProvider(ctrl *gomock.Controller) *MockMovieInfoProvider {
	mock := &MockMovieInfoProvider{ctrl: ctrl}
	mock.recorder = &MockMovieInfoProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMovieInfoProvider) EXPECT() *MockMovieInfoProviderMockRecorder {
	return m.recorder
}

// ID mocks base method.
func (m *MockMovieInfoProvider) ID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(string)
	return ret0
}

// ID indicates an expected call of ID.
func (mr *MockMovieInfoProviderMockRecorder) ID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockMovieInfoProvider)(nil).ID))
}

// SearchMovies mocks base method.
func (m *MockMovieInfoProvider) SearchMovies(ctx context.Context, query string, limit uint) ([]model.Movie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchMovies", ctx, query, limit)
	ret0, _ := ret[0].([]model.Movie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchMovies indicates an expected call of SearchMovies.
func (mr *MockMovieInfoProviderMockRecorder) SearchMovies(ctx, query, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchMovies", reflect.TypeOf((*MockMovieInfoProvider)(nil).SearchMovies), ctx, query, limit)
}

// MockTorrentsProvider is a mock of TorrentsProvider interface.
type MockTorrentsProvider struct {
	ctrl     *gomock.Controller
	recorder *MockTorrentsProviderMockRecorder
}

// MockTorrentsProviderMockRecorder is the mock recorder for MockTorrentsProvider.
type MockTorrentsProviderMockRecorder struct {
	mock *MockTorrentsProvider
}

// NewMockTorrentsProvider creates a new mock instance.
func NewMockTorrentsProvider(ctrl *gomock.Controller) *MockTorrentsProvider {
	mock := &MockTorrentsProvider{ctrl: ctrl}
	mock.recorder = &MockTorrentsProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTorrentsProvider) EXPECT() *MockTorrentsProviderMockRecorder {
	return m.recorder
}

// ID mocks base method.
func (m *MockTorrentsProvider) ID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(string)
	return ret0
}

// ID indicates an expected call of ID.
func (mr *MockTorrentsProviderMockRecorder) ID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockTorrentsProvider)(nil).ID))
}

// SearchTorrents mocks base method.
func (m *MockTorrentsProvider) SearchTorrents(ctx context.Context, query model.SearchQuery) ([]model.Torrent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchTorrents", ctx, query)
	ret0, _ := ret[0].([]model.Torrent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchTorrents indicates an expected call of SearchTorrents.
func (mr *MockTorrentsProviderMockRecorder) SearchTorrents(ctx, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchTorrents", reflect.TypeOf((*MockTorrentsProvider)(nil).SearchTorrents), ctx, query)
}

// MockCaptchaSolver is a mock of CaptchaSolver interface.
type MockCaptchaSolver struct {
	ctrl     *gomock.Controller
	recorder *MockCaptchaSolverMockRecorder
}

// MockCaptchaSolverMockRecorder is the mock recorder for MockCaptchaSolver.
type MockCaptchaSolverMockRecorder struct {
	mock *MockCaptchaSolver
}

// NewMockCaptchaSolver creates a new mock instance.
func NewMockCaptchaSolver(ctrl *gomock.Controller) *MockCaptchaSolver {
	mock := &MockCaptchaSolver{ctrl: ctrl}
	mock.recorder = &MockCaptchaSolverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCaptchaSolver) EXPECT() *MockCaptchaSolverMockRecorder {
	return m.recorder
}

// ID mocks base method.
func (m *MockCaptchaSolver) ID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(string)
	return ret0
}

// ID indicates an expected call of ID.
func (mr *MockCaptchaSolverMockRecorder) ID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockCaptchaSolver)(nil).ID))
}

// Solve mocks base method.
func (m *MockCaptchaSolver) Solve(ctx context.Context, captcha provider.Captcha) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Solve", ctx, captcha)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Solve indicates an expected call of Solve.
func (mr *MockCaptchaSolverMockRecorder) Solve(ctx, captcha interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Solve", reflect.TypeOf((*MockCaptchaSolver)(nil).Solve), ctx, captcha)
}
