// Code generated by MockGen. DO NOT EDIT.
// Source: internal/model/account.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	model "git.rms.local/RacoonMediaServer/rms-media-discovery/internal/model"
	gomock "github.com/golang/mock/gomock"
)

// MockAccessProvider is a mock of AccessProvider interface.
type MockAccessProvider struct {
	ctrl     *gomock.Controller
	recorder *MockAccessProviderMockRecorder
}

// MockAccessProviderMockRecorder is the mock recorder for MockAccessProvider.
type MockAccessProviderMockRecorder struct {
	mock *MockAccessProvider
}

// NewMockAccessProvider creates a new mock instance.
func NewMockAccessProvider(ctrl *gomock.Controller) *MockAccessProvider {
	mock := &MockAccessProvider{ctrl: ctrl}
	mock.recorder = &MockAccessProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccessProvider) EXPECT() *MockAccessProviderMockRecorder {
	return m.recorder
}

// GetApiKey mocks base method.
func (m *MockAccessProvider) GetApiKey(serviceId string) (model.ApiKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApiKey", serviceId)
	ret0, _ := ret[0].(model.ApiKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApiKey indicates an expected call of GetApiKey.
func (mr *MockAccessProviderMockRecorder) GetApiKey(serviceId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApiKey", reflect.TypeOf((*MockAccessProvider)(nil).GetApiKey), serviceId)
}

// GetCredentials mocks base method.
func (m *MockAccessProvider) GetCredentials(serviceId string) (model.Credentials, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCredentials", serviceId)
	ret0, _ := ret[0].(model.Credentials)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCredentials indicates an expected call of GetCredentials.
func (mr *MockAccessProviderMockRecorder) GetCredentials(serviceId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCredentials", reflect.TypeOf((*MockAccessProvider)(nil).GetCredentials), serviceId)
}

// MarkUnaccesible mocks base method.
func (m *MockAccessProvider) MarkUnaccesible(accountId string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "MarkUnaccesible", accountId)
}

// MarkUnaccesible indicates an expected call of MarkUnaccesible.
func (mr *MockAccessProviderMockRecorder) MarkUnaccesible(accountId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkUnaccesible", reflect.TypeOf((*MockAccessProvider)(nil).MarkUnaccesible), accountId)
}
