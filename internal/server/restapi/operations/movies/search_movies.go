// Code generated by go-swagger; DO NOT EDIT.

package movies

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/RacoonMediaServer/rms-media-discovery/internal/server/models"
)

// SearchMoviesHandlerFunc turns a function with the right signature into a search movies handler
type SearchMoviesHandlerFunc func(SearchMoviesParams, *models.Principal) middleware.Responder

// Handle executing the request and returning a response
func (fn SearchMoviesHandlerFunc) Handle(params SearchMoviesParams, principal *models.Principal) middleware.Responder {
	return fn(params, principal)
}

// SearchMoviesHandler interface for that can handle valid search movies params
type SearchMoviesHandler interface {
	Handle(SearchMoviesParams, *models.Principal) middleware.Responder
}

// NewSearchMovies creates a new http.Handler for the search movies operation
func NewSearchMovies(ctx *middleware.Context, handler SearchMoviesHandler) *SearchMovies {
	return &SearchMovies{Context: ctx, Handler: handler}
}

/*
	SearchMovies swagger:route GET /movies/search movies searchMovies

# Поиск фильмов и сериалов

Поиск фильмов и сериалов по названию на различных платформах
*/
type SearchMovies struct {
	Context *middleware.Context
	Handler SearchMoviesHandler
}

func (o *SearchMovies) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewSearchMoviesParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal *models.Principal
	if uprinc != nil {
		principal = uprinc.(*models.Principal) // this is really a models.Principal, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// SearchMoviesOKBody search movies o k body
//
// swagger:model SearchMoviesOKBody
type SearchMoviesOKBody struct {

	// results
	// Required: true
	Results []*models.SearchMoviesResult `json:"results"`
}

// Validate validates this search movies o k body
func (o *SearchMoviesOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateResults(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SearchMoviesOKBody) validateResults(formats strfmt.Registry) error {

	if err := validate.Required("searchMoviesOK"+"."+"results", "body", o.Results); err != nil {
		return err
	}

	for i := 0; i < len(o.Results); i++ {
		if swag.IsZero(o.Results[i]) { // not required
			continue
		}

		if o.Results[i] != nil {
			if err := o.Results[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("searchMoviesOK" + "." + "results" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("searchMoviesOK" + "." + "results" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this search movies o k body based on the context it is used
func (o *SearchMoviesOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateResults(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SearchMoviesOKBody) contextValidateResults(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Results); i++ {

		if o.Results[i] != nil {

			if swag.IsZero(o.Results[i]) { // not required
				return nil
			}

			if err := o.Results[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("searchMoviesOK" + "." + "results" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("searchMoviesOK" + "." + "results" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *SearchMoviesOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SearchMoviesOKBody) UnmarshalBinary(b []byte) error {
	var res SearchMoviesOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
