// Code generated by go-swagger; DO NOT EDIT.

package torrents

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"

	"github.com/RacoonMediaServer/rms-media-discovery/internal/server/models"
)

// PostTorrentSearchIDCancelHandlerFunc turns a function with the right signature into a post torrent search ID cancel handler
type PostTorrentSearchIDCancelHandlerFunc func(PostTorrentSearchIDCancelParams, *models.Principal) middleware.Responder

// Handle executing the request and returning a response
func (fn PostTorrentSearchIDCancelHandlerFunc) Handle(params PostTorrentSearchIDCancelParams, principal *models.Principal) middleware.Responder {
	return fn(params, principal)
}

// PostTorrentSearchIDCancelHandler interface for that can handle valid post torrent search ID cancel params
type PostTorrentSearchIDCancelHandler interface {
	Handle(PostTorrentSearchIDCancelParams, *models.Principal) middleware.Responder
}

// NewPostTorrentSearchIDCancel creates a new http.Handler for the post torrent search ID cancel operation
func NewPostTorrentSearchIDCancel(ctx *middleware.Context, handler PostTorrentSearchIDCancelHandler) *PostTorrentSearchIDCancel {
	return &PostTorrentSearchIDCancel{Context: ctx, Handler: handler}
}

/*
	PostTorrentSearchIDCancel swagger:route POST /torrent/search/{id}:cancel torrents postTorrentSearchIdCancel

# Отменить задачу

Отмена и удаление задачи поиска
*/
type PostTorrentSearchIDCancel struct {
	Context *middleware.Context
	Handler PostTorrentSearchIDCancelHandler
}

func (o *PostTorrentSearchIDCancel) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPostTorrentSearchIDCancelParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal *models.Principal
	if uprinc != nil {
		principal = uprinc.(*models.Principal) // this is really a models.Principal, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
