// Code generated by go-swagger; DO NOT EDIT.

package torrents

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"encoding/json"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/RacoonMediaServer/rms-media-discovery/internal/server/models"
)

// SearchTorrentsAsyncHandlerFunc turns a function with the right signature into a search torrents async handler
type SearchTorrentsAsyncHandlerFunc func(SearchTorrentsAsyncParams, *models.Principal) middleware.Responder

// Handle executing the request and returning a response
func (fn SearchTorrentsAsyncHandlerFunc) Handle(params SearchTorrentsAsyncParams, principal *models.Principal) middleware.Responder {
	return fn(params, principal)
}

// SearchTorrentsAsyncHandler interface for that can handle valid search torrents async params
type SearchTorrentsAsyncHandler interface {
	Handle(SearchTorrentsAsyncParams, *models.Principal) middleware.Responder
}

// NewSearchTorrentsAsync creates a new http.Handler for the search torrents async operation
func NewSearchTorrentsAsync(ctx *middleware.Context, handler SearchTorrentsAsyncHandler) *SearchTorrentsAsync {
	return &SearchTorrentsAsync{Context: ctx, Handler: handler}
}

/*
	SearchTorrentsAsync swagger:route POST /torrents/search:run torrents searchTorrentsAsync

# Старт задачи поиска раздач

LRO поиск раздач на торрент-трекерах
*/
type SearchTorrentsAsync struct {
	Context *middleware.Context
	Handler SearchTorrentsAsyncHandler
}

func (o *SearchTorrentsAsync) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewSearchTorrentsAsyncParams()
	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		*r = *aCtx
	}
	var principal *models.Principal
	if uprinc != nil {
		principal = uprinc.(*models.Principal) // this is really a models.Principal, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// SearchTorrentsAsyncBody search torrents async body
//
// swagger:model SearchTorrentsAsyncBody
type SearchTorrentsAsyncBody struct {

	// Скачать всю дискогорафию исполнителя (для музыки)
	Discography *bool `json:"discography,omitempty"`

	// Ограничение на кол-во результатов
	// Minimum: 1
	Limit int64 `json:"limit,omitempty"`

	// Искомый запрос
	// Required: true
	// Max Length: 128
	// Min Length: 2
	Q *string `json:"q"`

	// Номер сезона (для сериалов)
	// Minimum: 1
	Season int64 `json:"season,omitempty"`

	// Строго отсеивать раздачи, эвристически определенное имя которых не соответствует строчке запроса
	Strong *bool `json:"strong,omitempty"`

	// Подсказка, какого типа торренты искать
	// Enum: ["movies","music","books","others"]
	Type string `json:"type,omitempty"`

	// Год выхода (для фильмов и сериалов)
	// Minimum: 1900
	Year int64 `json:"year,omitempty"`
}

// Validate validates this search torrents async body
func (o *SearchTorrentsAsyncBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateLimit(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateQ(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateSeason(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateYear(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SearchTorrentsAsyncBody) validateLimit(formats strfmt.Registry) error {
	if swag.IsZero(o.Limit) { // not required
		return nil
	}

	if err := validate.MinimumInt("searchParameters"+"."+"limit", "body", o.Limit, 1, false); err != nil {
		return err
	}

	return nil
}

func (o *SearchTorrentsAsyncBody) validateQ(formats strfmt.Registry) error {

	if err := validate.Required("searchParameters"+"."+"q", "body", o.Q); err != nil {
		return err
	}

	if err := validate.MinLength("searchParameters"+"."+"q", "body", *o.Q, 2); err != nil {
		return err
	}

	if err := validate.MaxLength("searchParameters"+"."+"q", "body", *o.Q, 128); err != nil {
		return err
	}

	return nil
}

func (o *SearchTorrentsAsyncBody) validateSeason(formats strfmt.Registry) error {
	if swag.IsZero(o.Season) { // not required
		return nil
	}

	if err := validate.MinimumInt("searchParameters"+"."+"season", "body", o.Season, 1, false); err != nil {
		return err
	}

	return nil
}

var searchTorrentsAsyncBodyTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["movies","music","books","others"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		searchTorrentsAsyncBodyTypeTypePropEnum = append(searchTorrentsAsyncBodyTypeTypePropEnum, v)
	}
}

const (

	// SearchTorrentsAsyncBodyTypeMovies captures enum value "movies"
	SearchTorrentsAsyncBodyTypeMovies string = "movies"

	// SearchTorrentsAsyncBodyTypeMusic captures enum value "music"
	SearchTorrentsAsyncBodyTypeMusic string = "music"

	// SearchTorrentsAsyncBodyTypeBooks captures enum value "books"
	SearchTorrentsAsyncBodyTypeBooks string = "books"

	// SearchTorrentsAsyncBodyTypeOthers captures enum value "others"
	SearchTorrentsAsyncBodyTypeOthers string = "others"
)

// prop value enum
func (o *SearchTorrentsAsyncBody) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, searchTorrentsAsyncBodyTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *SearchTorrentsAsyncBody) validateType(formats strfmt.Registry) error {
	if swag.IsZero(o.Type) { // not required
		return nil
	}

	// value enum
	if err := o.validateTypeEnum("searchParameters"+"."+"type", "body", o.Type); err != nil {
		return err
	}

	return nil
}

func (o *SearchTorrentsAsyncBody) validateYear(formats strfmt.Registry) error {
	if swag.IsZero(o.Year) { // not required
		return nil
	}

	if err := validate.MinimumInt("searchParameters"+"."+"year", "body", o.Year, 1900, false); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this search torrents async body based on context it is used
func (o *SearchTorrentsAsyncBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *SearchTorrentsAsyncBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SearchTorrentsAsyncBody) UnmarshalBinary(b []byte) error {
	var res SearchTorrentsAsyncBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// SearchTorrentsAsyncOKBody search torrents async o k body
//
// swagger:model SearchTorrentsAsyncOKBody
type SearchTorrentsAsyncOKBody struct {

	// ID задачи поиска
	ID string `json:"id,omitempty"`

	// Рекомендуемый интервал поллинга
	PollIntervalMs int64 `json:"pollIntervalMs,omitempty"`
}

// Validate validates this search torrents async o k body
func (o *SearchTorrentsAsyncOKBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this search torrents async o k body based on context it is used
func (o *SearchTorrentsAsyncOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *SearchTorrentsAsyncOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SearchTorrentsAsyncOKBody) UnmarshalBinary(b []byte) error {
	var res SearchTorrentsAsyncOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
