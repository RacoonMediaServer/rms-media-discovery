// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SearchTorrentsResult search torrents result
//
// swagger:model SearchTorrentsResult
type SearchTorrentsResult struct {

	// audio
	Audio []*SearchTorrentsResultAudioItems0 `json:"audio"`

	// link
	// Required: true
	Link *string `json:"link"`

	// seeders
	Seeders int64 `json:"seeders,omitempty"`

	// size
	Size int64 `json:"size,omitempty"`

	// title
	Title string `json:"title,omitempty"`

	// video
	Video []*SearchTorrentsResultVideoItems0 `json:"video"`
}

// Validate validates this search torrents result
func (m *SearchTorrentsResult) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAudio(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLink(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVideo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SearchTorrentsResult) validateAudio(formats strfmt.Registry) error {
	if swag.IsZero(m.Audio) { // not required
		return nil
	}

	for i := 0; i < len(m.Audio); i++ {
		if swag.IsZero(m.Audio[i]) { // not required
			continue
		}

		if m.Audio[i] != nil {
			if err := m.Audio[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("audio" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("audio" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SearchTorrentsResult) validateLink(formats strfmt.Registry) error {

	if err := validate.Required("link", "body", m.Link); err != nil {
		return err
	}

	return nil
}

func (m *SearchTorrentsResult) validateVideo(formats strfmt.Registry) error {
	if swag.IsZero(m.Video) { // not required
		return nil
	}

	for i := 0; i < len(m.Video); i++ {
		if swag.IsZero(m.Video[i]) { // not required
			continue
		}

		if m.Video[i] != nil {
			if err := m.Video[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("video" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("video" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this search torrents result based on the context it is used
func (m *SearchTorrentsResult) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAudio(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVideo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SearchTorrentsResult) contextValidateAudio(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Audio); i++ {

		if m.Audio[i] != nil {
			if err := m.Audio[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("audio" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("audio" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SearchTorrentsResult) contextValidateVideo(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Video); i++ {

		if m.Video[i] != nil {
			if err := m.Video[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("video" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("video" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *SearchTorrentsResult) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SearchTorrentsResult) UnmarshalBinary(b []byte) error {
	var res SearchTorrentsResult
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// SearchTorrentsResultAudioItems0 search torrents result audio items0
//
// swagger:model SearchTorrentsResultAudioItems0
type SearchTorrentsResultAudioItems0 struct {

	// bitrate
	Bitrate float64 `json:"bitrate,omitempty"`

	// codec
	Codec string `json:"codec,omitempty"`

	// language
	Language string `json:"language,omitempty"`
}

// Validate validates this search torrents result audio items0
func (m *SearchTorrentsResultAudioItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this search torrents result audio items0 based on context it is used
func (m *SearchTorrentsResultAudioItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SearchTorrentsResultAudioItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SearchTorrentsResultAudioItems0) UnmarshalBinary(b []byte) error {
	var res SearchTorrentsResultAudioItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// SearchTorrentsResultVideoItems0 search torrents result video items0
//
// swagger:model SearchTorrentsResultVideoItems0
type SearchTorrentsResultVideoItems0 struct {

	// codec
	Codec string `json:"codec,omitempty"`

	// format
	Format string `json:"format,omitempty"`

	// height
	Height int64 `json:"height,omitempty"`

	// width
	Width int64 `json:"width,omitempty"`
}

// Validate validates this search torrents result video items0
func (m *SearchTorrentsResultVideoItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this search torrents result video items0 based on context it is used
func (m *SearchTorrentsResultVideoItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SearchTorrentsResultVideoItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SearchTorrentsResultVideoItems0) UnmarshalBinary(b []byte) error {
	var res SearchTorrentsResultVideoItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
